function cashFunction(fn) {
	const cash = {};
	return function (n) {
		if (cash[n]) {
			console.log('Взято з кеша', cash[n]);
			return cash[n];
		}
		let result = fn(n);
		console.log('Порахувала функція = ', result);
		cash[n] = result;
		return result;
	};
}

function factorial(n) {
	let result = 1;
	while (n != 1) {
		result *= n;
		n -= 1;
	}
	return result;
}

const cashFactorial = cashFunction(factorial);

cashFactorial(5);
cashFactorial(4);
cashFactorial(3);
cashFactorial(4);
cashFactorial(5);
cashFactorial(1);


/*
Приклад зберігання і використання данних збережених в кеші.


Цей код містить дві функції: cashFunction та factorial, і приклад використання цих функцій.

Функція cashFunction є функцією вищого порядку, яка приймає функцію fn як параметр і повертає нову функцію. Ця нова функція зберігає значення, які повернула вхідна функція fn для кожного виклику з різними аргументами в об'єкті cash.

Коли нова функція отримує новий аргумент n, вона перевіряє, чи є в об'єкті cash значення для даного аргументу n. Якщо значення вже є в кеші, то функція повертає його, не виконуючи вхідну функцію fn. Якщо значення немає в кеші, виконується вхідна функція fn з аргументом n, і її результат записується в об'єкт cash для подальшого використання. Функція також повертає результат вхідної функції.

Функція factorial обчислює факторіал числа n.

В останньому рядку коду функція cashFactorial створюється за допомогою cashFunction, передаючи factorial як параметр. Потім ця нова функція викликається кілька разів з різними аргументами для показу того, як працює кешування значень. Кожен раз, коли функція cashFactorial викликається з новим аргументом, вона перевіряє кеш на наявність значення для цього аргумента, виконує вхідну функцію factorial, якщо значення немає в кеші, і повертає результат. При повторному виклику з тим самим аргументом, вона просто повертає значення з кеша без виконання вхідної функції.

Або
________________________________________________________


Код складається з двох функцій: cashFunction та factorial. Функція cashFunction приймає функцію як параметр і повертає нову функцію. Функція factorial обчислює факторіал числа n. Приклад використання обох функцій дозволяє продемонструвати, як працює кешування значень.

Приклад використання:

scss
Copy code
const cashFactorial = cashFunction(factorial);

cashFactorial(5);
cashFactorial(4);
cashFactorial(3);
cashFactorial(4);
cashFactorial(5);
cashFactorial(1);
Кожен раз, коли функція cashFactorial викликається з новим аргументом, вона перевіряє наявність значення для цього аргумента в кеші. Якщо значення є в кеші, воно повертається, а вхідна функція factorial не виконується. Якщо значення немає в кеші, виконується вхідна функція factorial, результат записується в кеш і повертається.

Давайте розглянемо кожен рядок коду у прикладі використання.

scss
Copy code
const cashFactorial = cashFunction(factorial);
Цей рядок коду створює нову функцію cashFactorial, яка є результатом виклику функції cashFunction з параметром factorial. Тобто, функція factorial буде кешуватись, коли вона буде викликана через cashFactorial.

scss
Copy code
cashFactorial(5);
Цей рядок коду викликає функцію cashFactorial з аргументом 5. Перевіряється, чи є значення для 5 в кеші. Якщо немає, виконується вхідна функція factorial(5), результат (120) записується в кеш і повертається.

scss
Copy code
cashFactorial(4);
Цей рядок коду викликає функцію cashFactorial з аргументом 4. Перевіряється, чи є значення для 4 в кеші. Якщо немає, виконується вхідна функція factorial(4), результат (24) записується в кеш і повертається.
*/