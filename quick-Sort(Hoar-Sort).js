/* Швидке сортування, відоме також як сортування Хоара (англ. QuickSort) - це швидкий та ефективний алгоритм сортування, що базується на принципі "розділяй та пануй".

Ідея сортування Хоара полягає у рекурсивному розбитті масиву на менші частини, до тих пір поки не залишиться масивів з одним елементом або порожніх масивів, а потім злиття частин з попередньо відсортованими частинами, щоб отримати повний відсортований масив.

Алгоритм сортування Хоара зазвичай використовується для сортування масивів, оскільки він має часову складність O(n log n) у середньому випадку, що робить його ефективнішим за інші алгоритми сортування, такі як сортування бульбашкою чи сортування вибором. 

Рекурсія - це техніка програмування, коли функція викликає саму себе з певними аргументами. В інших словах, функція використовує сама себе для вирішення задачі.

Рекурсія може бути дуже корисною для вирішення складних завдань, що мають структуру, що повторюється. Це дозволяє розбити велику задачу на менші підзадачі, які можуть бути вирішені рекурсивним способом.

Однак, використання рекурсії потребує уважності, оскільки неправильно написана рекурсивна функція може призвести до зациклення та переповнення стеку.
*/

// Приклад рекурсивних функцій (які визивають саму себе)

// const factorial = (n) =>{
// 	if(n===1) {
// 		return 1
// 	}
// 	return n * factorial(n-1)
// }
// console.log(factorial(5));

// числа Фібоначі це ланцюг числел де число є сумою двух попередніх чисел  послідовність Фібоначі: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, і так далі
// const fibonachi = (n) => {
// 	if (n===1 || n===2) {
// 		return 1
// 	}
// 	return fibonachi(n-1) + fibonachi (n-2)
// }
// console.log(fibonachi(11));

const arr = [
	6, -37, 7, 3, 2, 6, 4, 8, 1, 2, 3, 7, 6, 5, 4, 0, -5, 1, 3, 6, 4, 1, 9, 8, 3,
	5, 4, -36, 7, 1, 2, 6, 5, 4, 3, 2, 0, 9, 6, 7, 89, 2, 5446,
];
let count = 0;

function quickSort(array) {
	if (array.length <= 1) {
		return array;
	}
	let pivotIndex = Math.floor(array.length / 2);
	let pivot = array[pivotIndex];
	let less = [];
	let greater = [];
	for (let i = 0; i < array.length; i++) {
		count++;
		if (i === pivotIndex) continue;
		if (array[i] < pivot) {
			less.push(array[i]);
		} else {
			greater.push(array[i]);
		}
	}
	return [...quickSort(less), pivot, ...quickSort(greater)];
}

console.log(quickSort(arr));
console.log('count = ', count);
