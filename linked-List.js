/*

Зв'язаний список - це структура даних, яка складається з вузлів (елементів), які містять дані та посилання на наступний елемент у списку. Посилання на останній елемент списку можуть мати значення null або nil.

Принцип роботи зв'язаного списку полягає в тому, що елементи у списку зберігаються в послідовності. Кожен елемент (вузол) зберігає посилання на наступний елемент у списку, або значення null, якщо він є останнім. Вузли у списку не обов'язково мають бути розташовані поряд, вони можуть знаходитися у різних частинах пам'яті.

Зв'язаний список може бути однозв'язним або двозв'язним. У однозв'язному списку кожен вузол має посилання тільки на наступний елемент у списку, тоді як у двозв'язному списку кожен вузол має посилання на наступний та попередній елементи у списку.

Операції, які можна виконати зі зв'язаним списком, включають додавання нового елемента до списку, видалення елемента зі списку, знаходження елементу в списку та ітерацію по елементам списку. Однак, додавання та видалення елементів зі середини списку може бути більш витратним за часом, ніж у масиві, тому є деякі обмеження на ефективність зв'язаних списків.


*/



class LinkedList {
	constructor() {
		this.size = 0;
		this.root = null;
	}

	add(value) {
		if (this.size === 0) {
			this.root = new Node(value);
			this.size += 1;
			return true;
		}
		let node = this.root;
		while (node.next) {
			node = node.next;
		}
		let newNode = new Node(value);
		node.next = newNode;
		this.size += 1;
	}

	getSize() {
		return this.size;
	}

	print() {
		let result = [];
		let node = this.root;
		while (node) {
			result.push(node.value);
			node = node.next;
		}
		console.log(result);
	}
}

class Node {
	constructor(value) {
		this.value = value;
		this.next = null;
	}
}

const list = new LinkedList();
list.add(5);
list.add(3);
list.add(2);
list.add(5);
list.add(7);

list.print();

/*

Цей код визначає структуру даних пов’язаного списку за допомогою двох класів: LinkedList і Node. Клас LinkedList містить конструктор, який ініціалізує розмір 0, а корінь — нуль. Він також визначає три методи: add, getSize і print.

Метод add приймає параметр значення та додає новий вузол із цим значенням у кінець списку. Якщо список порожній, він встановлює корінь для нового вузла. Якщо список не порожній, він проходить список до кінця та додає туди новий вузол.

Метод getSize повертає розмір списку.

Метод друку друкує значення кожного вузла в списку по порядку.

Клас Node містить конструктор, який приймає параметр значення та ініціалізує значення та наступні властивості.

Нарешті, код створює новий екземпляр LinkedList, додає до нього п’ять вузлів зі значеннями 5, 3, 2, 5 і 7 і друкує значення кожного вузла в списку за допомогою методу друку.


*/
