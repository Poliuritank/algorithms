/*

Map - це вбудований об'єкт у JavaScript, який використовується для зберігання ключ-значення в парах, де кожен ключ унікальний, тобто не може бути дублюваний.

Map дозволяє вставляти, видаляти, зчитувати та оновлювати елементи за допомогою методів, таких як set(), get(), delete() та has(). Крім того, Map має вбудовану функцію forEach(), яка дозволяє перебирати всі елементи об'єкта.

Map можна використовувати для різних завдань, включаючи зберігання налаштувань, зберігання даних форми та створення словника. Map є альтернативою об'єкту з ключ-значеннями, проте він має деякі переваги, такі як можливість використовувати будь-який тип даних для ключів, а не тільки рядки та можливість швидкого видалення та додавання елементів.
Найпоширенішим використанням Map в JavaScript є зберігання даних в парах ключ-значення. Зазвичай, Map використовують для зберігання та організації даних, які мають унікальний ідентифікатор (ключ), наприклад, налаштування програми, дані форми, словник та інші.

Додатково, Map можна використовувати для обробки та трансформації даних. Наприклад, метод Map.prototype.map() дозволяє застосовувати функцію до кожного елементу Map та повертати новий об'єкт Map, що містить результати обробки кожного елементу.

Крім цього, Map можна використовувати для виконання алгоритмів з обробки даних, таких як обхід дерева або графа.

Також, Map можна використовувати як альтернативу об'єкту з ключ-значеннями, якщо потрібно використовувати нестрокові ключі або якщо потрібно зберігати більше даних, ніж тільки просте значення, що зберігається в об'єкті.

Отже, Map є потужним інструментом в JavaScript, який можна використовувати для зберігання, обробки та організації даних.
++++++++++++++++++++++++++++++++++++

Методи set(), get(), delete() та has() є базовими методами об'єкта Map в JavaScript і дозволяють взаємодіяти з ключ-значеннями в об'єкті Map.

Метод set(key, value) додає нову пару ключ-значення в об'єкт Map. В якості параметрів метод отримує ключ (який може бути будь-яким типом даних, включаючи примітиви та об'єкти) та значення, яке потрібно зберегти для цього ключа. Якщо ключ вже існує в Map, то метод set() замінює його значення на нове.

Приклад використання методу set():
let myMap = new Map();
myMap.set("key1", "value1");
myMap.set("key2", "value2");


Метод get(key) дозволяє отримати значення, пов'язане з заданим ключем в об'єкті Map. Якщо ключ не існує в Map, метод повертає undefined.

Приклад використання методу get():
let myMap = new Map();
myMap.set("key1", "value1");
myMap.set("key2", "value2");
console.log(myMap.get("key1")); // виведе "value1"

Метод delete(key) дозволяє видалити пару ключ-значення з об'єкта Map за допомогою ключа. Якщо ключ існує в Map, метод видаляє пару ключ-значення та повертає true. Якщо ключ не знайдено в Map, метод повертає false.

Приклад використання методу delete():
let myMap = new Map();
myMap.set("key1", "value1");
myMap.set("key2", "value2");
myMap.delete("key1");

Метод has(key) дозволяє перевірити, чи існує ключ у Map. Якщо ключ існує, метод повертає true. Якщо ключ не знайдено в Map, метод повертає false.

Приклад використання методу has():
let myMap = new Map();
myMap.set("key1", "value1");
console.log(myMap.has("key1")); // виведе true
console.log(myMap.has("key2")); // виведе false

Ці методи є потужним інструментом для роботи з об'єктом Map в JavaScript та дозволяють додавати, видаляти, зчитувати та перевіряти наявність пар ключ-значення в об'єкті Map.

*/

const map = new Map();
const objKey = { id: 5 };
map.set(objKey, 'ulbi tv');

console.log(map.get(objKey));

const set = new Set();

set.add(5);
set.add(5);
set.add(5);
set.add(5);
set.add(5);
set.add(4);
set.add(3);
console.log(set);
